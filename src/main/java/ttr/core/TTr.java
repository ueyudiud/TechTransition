package ttr.core;

import java.io.File;
import java.util.Arrays;

import net.minecraft.util.math.BlockPos;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLFingerprintViolationEvent;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.relauncher.Side;
import ttr.api.TTrAPI;
import ttr.api.enums.EnumMaterial;
import ttr.api.fuel.FuelHandler;
import ttr.api.item.ItemBase;
import ttr.api.net.gui.PacketFluidUpdateAll;
import ttr.api.net.gui.PacketFluidUpdateSingle;
import ttr.api.net.tile.PacketTEAsk;
import ttr.api.net.tile.PacketTESAskRender;
import ttr.api.net.tile.PacketTESync;
import ttr.api.network.Network;
import ttr.api.recipe.TemplateRecipeMap;
import ttr.api.recipe.TempleteRecipeHandler;
import ttr.api.util.LanguageManager;
import ttr.api.util.Log;
import ttr.core.network.PacketSlotConfig;
import ttr.load.Config;
import ttr.load.TTrIBF;
import ttr.load.TTrLangs;
import ttr.load.TTrRecipes;
import ttr.load.recipe.TTrRecipeModify;
import ttr.load.recipe.TTrRecipeRemove;

@Mod(modid = TTr.MODID, name = TTr.NAME, version = TTr.VERSION,
dependencies = "required-after:IC2; "
		+ "after:BuildCraft|Transport; after:BuildCraft|Silicon; "
		+ "after:BuildCraft|Factory; after:BuildCraft|Energy; "
		+ "after:BuildCraft|Core; after:BuildCraft|Builders; "
		+ "after:EnderIO; after:ThermalExpansion; "
		+ "after:ThermalFoundation; after:RedstoneArsenal; "
		+ "after:Railcraft")
public class TTr
{
	public static final String MODID = "TTr";
	public static final String NAME = "Tech Transition";
	public static final String VERSION = "2.00h";
	public static final int minForge = 2011;
	
	@Instance(MODID)
	public static TTr mod;
	
	private LanguageManager lang;
	public static Network network;
	private Configuration config;
	@SidedProxy(serverSide = "ttr.core.CommonProxy", clientSide = "ttr.core.ClientProxy")
	public static CommonProxy proxy;
	private File file;
	
	public TTr()
	{
		TTrAPI.ttr = mod = this;
		network = Network.network(MODID);
	}
	
	public void check(FMLFingerprintViolationEvent event)
	{
		try
		{
			new BlockPos(1, 2, 3).getDistance(3, 2, 1);
		}
		catch (Throwable throwable)
		{
			throw new Error("TTr can not run in this enviorment, please check if you download dev version.", throwable);
		}
	}
	
	@EventHandler
	public void preLoad(FMLPreInitializationEvent event)
	{
		Log.logger = event.getModLog();
		ModMetadata mm = event.getModMetadata();
		mm.credits = "ueyudiud";
		mm.description = "This mod is a tech mod which proved the imagine"
				+ "in this url http://tieba.baidu.com/p/2880277298.";
		mm.autogenerated = false;
		mm.authorList = Arrays.asList("ueyudiud");
		mm.version = VERSION;
		mm.url = "http://null";
		mm.logoFile = "/assets/ttr/textures/logo.png";
		
		Log.info("Tech Transition start checking forge version.");
		int forge = ForgeVersion.getBuildVersion();
		if ((forge > 0) && (forge < minForge))
			throw new RuntimeException("The currently installed version of "
					+ "Minecraft Forge (" + ForgeVersion.getMajorVersion() + "." + ForgeVersion.getMinorVersion() + "." +
					ForgeVersion.getRevisionVersion() + "." + forge + ") is too old.\n" +
					"Please update the Minecraft Forge.\n" + "\n" +
					"(Technical information: " + forge + " < " + minForge + ")");
		Log.info("Tech Transition start load config.");
		try
		{
			this.lang = new LanguageManager(new File(TTrAPI.proxy.fileDir(), "lang"));
			File configFile = new File(event.getModConfigurationDirectory(), "TTr.cfg");
			this.file = new File(event.getModConfigurationDirectory(), "ttr_recipes");
			if(!this.file.exists())
			{
				this.file.mkdirs();
				this.file.createNewFile();
			}
			this.config = new Configuration(configFile);
			this.config.load();
			Log.info("Config loaded from " + configFile.getAbsolutePath());
		}
		catch (Exception e)
		{
			Log.warn("Error while trying to access configuration! " + e);
			this.config = null;
		}
		if(this.config != null)
		{
			Config.init(this.config);
			this.config.save();
		}
		this.lang.read();
		//		MinecraftForge.EVENT_BUS.register(new OreHandler());
		Log.info("Tech Transition start pre load.");
		EnumMaterial.postinit();
		TTrIBF.init();
		//		TTrCovers.init();
		//		MinecraftForge.EVENT_BUS.register(new FluidHandler());
		proxy.registerRender();
		ItemBase.post();
	}
	
	@EventHandler
	public void load(FMLInitializationEvent event)
	{
		network.registerPacket(PacketTEAsk.class, Side.SERVER);
		network.registerPacket(PacketTESync.class, Side.CLIENT);
		network.registerPacket(PacketTESAskRender.class, Side.CLIENT);
		network.registerPacket(PacketFluidUpdateAll.class, Side.CLIENT);
		network.registerPacket(PacketFluidUpdateSingle.class, Side.CLIENT);
		network.registerPacket(PacketSlotConfig.class, Side.SERVER);
		TTrLangs.init();
		TTrIBF.postinit();
		NetworkRegistry.INSTANCE.registerGuiHandler(MODID, proxy);
		//		proxy.registedRender();
	}
	
	@EventHandler
	public void postLoad(FMLPostInitializationEvent event)
	{
		//		OreHandler.preReloadOreRecipes();
		TTrRecipes.preinit();
		//		GameRegistry.registerWorldGenerator(new TTrWorldGen(), 4);
		TempleteRecipeHandler.load(this.file);
	}
	
	@EventHandler
	public void complete(FMLLoadCompleteEvent event)
	{
		//		TTrFuel.init();
		FuelHandler.addFuelHandler(new ttr.core.handler.FuelHandler());
		TTrRecipeRemove.removeAll();
		TTrRecipes.init();
		TempleteRecipeHandler.reload();
		TTrRecipeModify.completeload();
		TemplateRecipeMap.reloadRecipeMaps();
		//		TTrCompact.init();
		//		OreHandler.postReloadOreRecipes();
		this.lang.write();
	}
}